1. Strategy pattern: The Strategy design pattern defines a family of algorithms, encapsulate each one, and make them interchangeable. 
   This pattern lets the algorithm vary independently from clients that use it.

   Frequency of use: high

2. State pattern: The State design pattern allows an object to alter its behavior when its internal state changes. 
   The object will appear to change its class.
         
   Frequency of use: medium

3. Factory Method: The Factory Method design pattern defines an interface for creating an object, 
   but let subclasses decide which class to instantiate. This pattern lets a class defer instantiation to subclasses.

   Frequency of use: high

4. The Observer design pattern defines a one-to-many dependency between objects so that when one object changes state, 
   all its dependents are notified and updated automatically.
         
   Frequency of use:high